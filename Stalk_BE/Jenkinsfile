pipeline {
  agent any

  environment {
    BRANCH_NAME = "${env.GIT_BRANCH}".replaceAll(".*/", "")
  }

  stages {
    stage('Deploy BE') {
      steps {
        script {
          // 변경된 파일 목록 가져오기
          def changed = sh(script: "git diff --name-only HEAD~1 HEAD", returnStdout: true).trim()

          // Stalk_BE 디렉토리만 감지
          if (!changed.contains("Stalk_BE/")) {
            echo "🟡 BE 디렉토리 변경 없음 → 배포 생략"
          }

          else {
            def isProd = BRANCH_NAME == 'master'
            def COMPOSE_FILE = isProd ? 'docker-compose.prod.yml' : 'docker-compose.dev.yml'
            def CREDENTIAL_ID = isProd ? 'properties-prod' : 'properties-dev'
            def CONTAINER    = isProd ? 'stalk-be-prod'            : 'stalk-be-dev'

            withCredentials([file(credentialsId: CREDENTIAL_ID, variable: 'APP_PROPS_FILE')]) {
              dir('Stalk_BE') {
                sh """
                  echo "📦 application.properties 복사 중..."
                  rm -f application.properties
                  cp -f "$APP_PROPS_FILE" application.properties
                """
              }

              sh """
                echo "🗑️ 기존 BE 컨테이너 직접 삭제 (${CONTAINER})..."
                docker rm -f ${CONTAINER} || true

                echo "🚀 도커 컴포즈로 빌드 및 실행..."
                docker compose -f ${COMPOSE_FILE} up -d --build stalk-be
              """
            }
          }
        }
      }
    }
  }
}
