pipeline {
  agent any

  environment {
    BRANCH_NAME = "${env.GIT_BRANCH}".replaceAll(".*/", "")
  }

  stages {
    stage('Deploy FE') {
      steps {
        script {
          def changed = sh(script: "git diff --name-only HEAD~1 HEAD", returnStdout: true).trim()

          //필요하다면 FE 변경 여부로 배포 스킵 가능
          if (!changed.contains("Stalk_FE/")) {  
            echo "🟡 FE 디렉토리 변경 없음 → 배포 생략"
          }

          else {
            def isProd = BRANCH_NAME == 'master'
            def COMPOSE_FILE = isProd ? 'docker-compose.prod.yml' : 'docker-compose.dev.yml'
            def CONTAINER    = isProd ? 'stalk-fe-prod'            : 'stalk-fe-dev'

              // ─── 시크릿 .env 파일 주입 ───
            withCredentials([file(credentialsId: 'frontend-env', variable: 'ENV_FILE')]) {
              dir('Stalk_FE') {
                sh """
                  echo "🔒 .env 파일 복사 중..."
                  rm -f .env
                  cp "$ENV_FILE" .env
                """
              }
            }

            sh """
                echo "🗑️ 기존 FE 컨테이너 직접 삭제 (${CONTAINER})..."
                docker rm -f ${CONTAINER} || true

                echo "🚀 FE docker-compose 실행 중 (${COMPOSE_FILE})..."
                docker compose -f ${COMPOSE_FILE} up -d --build stalk-fe
            """
          }
        }
      }
    }
    
    //nginx 컨테이너 수정이 필요할 때만 사용 
    stage('Deploy nginx') {   
      steps {
        script {
          def isProd = BRANCH_NAME == 'master'
          def COMPOSE_FILE = isProd ? 'docker-compose.prod.yml' : 'docker-compose.dev.yml'
          def CONTAINER    = isProd ? 'nginx-prod'              : 'nginx-dev'

          sh """
            echo "🗑️ 기존 nginx 컨테이너 직접 삭제 (${CONTAINER})..."
            docker rm -f ${CONTAINER} || true

            echo "🛡️ nginx docker-compose 실행 중 (${COMPOSE_FILE})..."
            docker compose -f ${COMPOSE_FILE} up -d --no-deps nginx
          """
        }
      }
    }
  }
}
